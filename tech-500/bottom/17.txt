The Web is bursting with new ways of reading and writing. Publishing is changing—from what people want to read, to how they want to read it. The rise of the e-book, new media tools, and new communities of readers and writers are transforming the very way we tell stories. This series will feature excerpts from the work of digitally self- published authors, e-book authors, or from new books that look at Internet culture in order to give a taste of the new frontier of literature in the digital age. 

I began work on my latest book back in 2008. For the previous 12 years, I had been immersed in the study of some of the world's greatest masters, in all fields, all cultures. Based on all this research, my goal in this new book was to put forward a radical new way of looking at human intelligence and high achievement, countering the various misconceptions we have about talent and genius. So when I came upon the story of Paul Graham—the computer engineer, writer, investor and mentor behind Y Combinator—I was intrigued.

Here was man who embodied both the hacker mindset and the path to mastery. As a student, he studied both art and computer science, exploring many disparate subjects that innately appealed to him, accumulating various skills in his twenties. Suddenly, as part of the Internet’s first wave of entrepreneurial hackers in the mid-1990's, Paul Graham rose to prominence with Viaweb, an early e-commerce company that pioneered the Software-as-a-Service model. As the founder of Y Combinator, he has become a driving force behind the Internet's next wave—helping incubate companies like AirBnB, Reddit, and DropBox. From his story we understand the primary form of education for most masters: learning through trial and error and hands-on practice. And we can follow in their lead in our own journey. 

Each age tends to create a model of apprenticeship that is suited to the system of production that prevails at the time. The Middle Ages gave birth to the first apprenticeship system and the Industrial Revolution developed the form of self-apprenticeship—developing yourself from within a particular field. We are now in the computer age, with computers dominating nearly all aspects of commercial life. Although there are many ways in which this could influence the concept of apprenticeship, it is the hacker approach to programming that may offer the most promising model for this new age. There is no better elucidation of this than Paul Graham, Y Combinator founder and e-commerce pioneer.

Growing up in a suburb of Pittsburgh, Pennsylvania, in the early 1970s, Paul Graham became fascinated with the depiction of computers in television and film. They were like electronic brains with limitless powers. In the near future, or so it seemed, you would be able to talk to your computer, and it would do everything you wanted.

In junior high school he had been admitted into a program for gifted students that provided them with the chance to work on a creative project of their choosing. Graham decided to focus his project on the school’s computer, an IBM mainframe that was used for printing out grade reports and class schedules. This was the first time he had gotten his hands on a computer, and although it was primitive and had to be programmed with punch cards, it seemed like something magical—a portal to the future.

Over the next few years, he taught himself how to program by consulting the few books then written on the subject, but mostly he learned by trial and error. Like painting on a canvas, he could see the results immediately of what he had done—and if the programming worked, it had a certain aesthetic rightness to it. The process of learning through trial and error was immensely satisfying. He could discover things on his own, without having to follow a rigid path set up by others. (This is the essence of being a “hacker.”) And the better he got at programming, the more he could make it do.

Deciding to pursue his studies further, he chose to attend Cornell University, which at the time had one of the best computer science departments in the country. Here he finally received instruction in the basic principles of programming, cleaning up many of the bad hacking habits he had developed on his own. He became intrigued by the recently developed field of artificial intelligence—the key to designing the kinds of computers he had dreamed about as a child. To be on the frontier of this new field, he applied and was accepted to the graduate school in computer science at Harvard University.

At Harvard Graham finally had to confront something about himself—he was not cut out for academia. He hated writing research papers. The university way of programming took all the fun and excitement out of it—the process of discovering through trial and error. He was a hacker at heart, one who liked to figure things out for himself. He found a fellow hacker at Harvard, Robert Morris, and together they began to explore the intricacies of the programming language Lisp. It seemed like the most potentially powerful and fluid language of them all. Understanding Lisp made you understand something essential about programming itself. It was a language suited for high-level hackers, a language specifically made for investigation and discovery.

Disillusioned with the computer science department at Harvard, Graham decided to design his own graduate school program: he would take a wide range of classes and discover what interested him the most. To his surprise, he found himself attracted to art—to painting, and to the subject of art history itself. What this meant to him was that he should follow this interest and see where it would lead. After completing his PhD at Harvard in computer science, he enrolled in the Rhode Island School of Design, then attended a painting program at the Accademia in Florence, Italy. He returned to the States broke but determined to try his hand at painting. He would pay for his lifestyle with intermittent consulting work in programming.

As the years went by, he would occasionally reflect on the course of his life. Artists in the Renaissance would go through clear-cut apprenticeships, but what could he say about his own apprenticeship? There seemed to be no real design or direction to his life. It was like the “cheesy hacks” he did in high school, patching things together, figuring things out through constant trial and error, finding out what worked by doing it. Shaping his life in this haphazard way, he learned what to avoid—academia; working for large companies; any political environment. He liked the process of making things. What really mattered to him in the end was having possibilities— being able to go in this or that direction, depending on what life presented to him. If over the years he had undergone an apprenticeship, it was almost by default.

One afternoon in 1995, he heard on the radio a story about Netscape— the company itself was touting its future and discussing how someday most businesses would be selling their products on the Internet itself, with Netscape leading the way. With his bank account getting desperately low again, yet dreading the idea of returning to another consulting job, he recruited his old hacker friend Robert Morris to help him create software for running an online business. Graham’s idea was to design a program that would run directly on the web server instead of having to be downloaded. No one had thought of this before. They would write the program in Lisp, taking advantage of the speed with which they could make changes to it. They called their business Viaweb, and it would be the first of its kind, the pioneer of online commerce. Just three years later they sold it to Yahoo! for $45 million.

In the years to come Graham would continue on the path set in his twenties, moving to where his interests and skills converged, to wherever he could see possibilities. In 2005 he gave a talk at Harvard about his experiences with Viaweb. The students, excited by his advice, pleaded with him to start up some kind of consulting firm. Intrigued by the idea, he created Y Combinator, an apprenticeship system for young entrepreneurs in technology, with his company taking a stake in each successful startup. Over the years he would refine the system, learning as he went along.

Looking through the lens of Paul Graham’s life, we can see a clear application of the new model of self-apprenticeship. It goes like this: You want to learn as many skills as possible, following the direction that circumstances lead you to, but only if they are related to your deepest interests. Like a hacker, you value the process of self-discovery and making things that are of the highest quality. You avoid the trap of following one set career path. You are not sure where this will all lead, but you are taking full advantage of the openness of information, all of the knowledge about skills now at our disposal. You see what kind of work suits you and what you want to avoid at all cost. You move by trial and error. This is how you pass your twenties. You are the programmer of this wide-ranging apprenticeship, within the loose constraints of your personal interests.

You are not wandering about because you are afraid of commitment, but because you are expanding your skill base and your possibilities. At a certain point, when you are ready to settle on something, ideas and opportunities will inevitably present themselves to you. When that happens, all of the skills you have accumulated will prove invaluable. You will be the Master at combining them in ways that are unique and suited to your individuality.

In this new age, those who follow a rigid, singular path in their youth often find themselves in a career dead end in their forties, or overwhelmed with boredom. The wide-ranging apprenticeship of your twenties will yield the opposite—expanding possibilities as you get older.

In the end, Y Combinator represented Paul Graham’s ultimate hack—something he came upon by accident and improved through his own process of trial and error. The company is now valued at close to $500 million. 

Reprinted by arrangement with Viking, a member of Penguin Group (USA) Inc., from Mastery  by Robert Greene. Copyright © 2012 by Robert Greene.
